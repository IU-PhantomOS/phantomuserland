//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();
local int64 bef_rec;

struct PC_Record_Header
{
    char marker[5];
    char record_type;
    long record_len;
};

typedef struct PhantomString
{
    long strLen;
    char String[strLen];
}  PhantomString;

typedef struct 
{
    long isContainer;
    PhantomString ClassName;
    PhantomString ContainedClassName;
} PhantomType;


typedef struct 
{
    long IP;
    long LineNum;
} IP_to_Line;


typedef struct
{
    long Ordinal;
    long MapSize;
    IP_to_Line map[MapSize];
} LineMapRecord;

typedef struct
{
    PhantomString MethodName;
    long Ordinal;
    long nArgs;
    long isConstructor;
    PhantomType ReturnType;
} SignatureRecord;

typedef struct
{
    PhantomString ClassName; // <comment=ClassName.String>
    long nFields;
    long nMethods;
    PhantomString BaseClassName;
} ClassRecord;

typedef struct
{
    PhantomString MethodName;
    long Ordinal;
} MethodRecord;

/*
typedef struct
{
    long ConstId;
    PhantomType ConstType;
    //PhantomString Constant;
    // now there

} ConstantRecord;
*/

void readPhantomConst(int64 finalPos)
{
    long ConstId;
    PhantomType ConstType;
    //char constant[ finalPos-FTell() ];
}










while(1)
{
    bef_rec = FTell();

    struct PC_Record_Header h;

    switch( h.record_type ) 
    {
    case 'C': // Class
        //PhantomString ClassName; // <comment=ClassName.String>
        //long nFields;
        //long nMethods;
        //PhantomString BaseClassName;
        ClassRecord classRec;
    break;

    case 'M': // Method
        MethodRecord methodRec;
    break;

    case 'S': // Signature
        //PhantomString MethodName;
        ///long Ordinal;
        //long nArgs;
        //long isConstructor;
        //PhantomType ReturnType;
        SignatureRecord sigRec;
    break;

    case 'l': // Line to IP map
        //long Ordinal;
        //long MapSize;
        //IP_to_Line map[MapSize];
        LineMapRecord mapRec;
    break;

    case 'c': // Const pool el
        //long ConstId;
        //PhantomType ConstType;
        //PhantomString Constant;
        //ConstantRecord constRec;
        readPhantomConst(bef_rec + h.record_len);
    break;

    case 'f': // Field
        //while( FTell() < bef_rec + h.record_len )
        //{
            PhantomString FieldName;
            long FieldOrdinal;
            PhantomType FieldType;
        //}
    break;


    default : return;
    }

    FSeek( bef_rec + h.record_len );
    
    if(FEof()) break;
}