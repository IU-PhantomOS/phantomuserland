Class version 20190818003536729

method put ordinal 16
--
  arg_count 2			//  @0
  stack_reserve obj=2 int=0	//  @2
    ; Line 40			//  @5
    ; Line 39			//  @5
  summon this			//  @5
    ; Line 39			//  @6
  get o stk pos=0			//  @6
    ; Line 39			//  @11
  call m=18 nparm=1		//  @11
    ; Line 39			//  @13
  summon null			//  @13
    ; Line 39			//  @14
  ptr neq				//  @14
  jz _label_0			//  @15
    ; Line 40			//  @20
  const 0				//  @20
  i2o				//  @25
    ; Line 40			//  @26
  ret				//  @26
_label_0:	//  @27
    ; Line 42			//  @27
  load fld=0			//  @27
    ; Line 42			//  @29
  get o stk pos=0			//  @29
    ; Line 42			//  @34
  load fld=1			//  @34
  call m=11 nparm=2		//  @36
  os drop				//  @38
    ; Line 42			//  @39
    ; Line 43			//  @39
  load fld=0			//  @39
    ; Line 43			//  @41
  get o stk pos=1			//  @41
    ; Line 43			//  @46
  load fld=1			//  @46
  o2i				//  @48
    ; Line 43			//  @49
  const 1				//  @49
    ; Line 43			//  @54
  isum				//  @54
  i2o				//  @55
  call m=11 nparm=2		//  @56
  os drop				//  @58
    ; Line 43			//  @59
    ; Line 44			//  @59
  load fld=1			//  @59
  o2i				//  @61
    ; Line 44			//  @62
  const 2				//  @62
    ; Line 44			//  @67
  isum				//  @67
  i2o				//  @68
  os dup				//  @69
  save fld=1			//  @70
  os drop				//  @72
    ; Line 44			//  @73
    ; Line 46			//  @73
  const 1				//  @73
  i2o				//  @78
    ; Line 46			//  @79
  ret				//  @79
    ; Line 46			//  @80
  ret				//  @80
--
method end

method <init> ordinal 17
--
  arg_count 0			//  @0
  ret				//  @2
--
method end

method get ordinal 18
--
  arg_count 1			//  @0
  stack_reserve obj=1 int=1	//  @2
    ; Line 54			//  @5
  const 0				//  @5
  is dup				//  @10
  set i stk pos=0			//  @11
  is drop				//  @16
    ; Line 63			//  @17
_label_0:	//  @17
    ; Line 56			//  @17
  get i stk pos=0			//  @17
    ; Line 56			//  @22
  load fld=1			//  @22
  o2i				//  @24
  ilt <				//  @25
  jz _label_1			//  @26
    ; Line 61			//  @31
    ; Line 58			//  @31
  get o stk pos=0			//  @31
    ; Line 58			//  @36
  load fld=0			//  @36
    ; Line 58			//  @38
  get i stk pos=0			//  @38
  i2o				//  @43
  call m=10 nparm=1		//  @44
    ; Line 58			//  @46
  call m=4 nparm=1		//  @46
  o2i				//  @48
  jz _label_2			//  @49
    ; Line 60			//  @54
  load fld=0			//  @54
    ; Line 60			//  @56
  get i stk pos=0			//  @56
    ; Line 60			//  @61
  const 1				//  @61
    ; Line 60			//  @66
  isum				//  @66
  i2o				//  @67
  call m=10 nparm=1		//  @68
    ; Line 60			//  @70
  ret				//  @70
_label_2:	//  @71
    ; Line 62			//  @71
  get i stk pos=0			//  @71
    ; Line 62			//  @76
  const 2				//  @76
    ; Line 62			//  @81
  isum				//  @81
  is dup				//  @82
  set i stk pos=0			//  @83
  is drop				//  @88
    ; Line 62			//  @89
  jmp _label_0			//  @89
_label_1:	//  @94
    ; Line 63			//  @94
    ; Line 65			//  @94
  summon null			//  @94
    ; Line 65			//  @95
  ret				//  @95
    ; Line 65			//  @96
  ret				//  @96
--
method end

method init ordinal 19
--
  arg_count 0			//  @0
    ; Line 30			//  @2
  const 0				//  @2
  i2o				//  @7
  os dup				//  @8
  save fld=1			//  @9
  os drop				//  @11
  summon class internal.container.array	//  @12
  new				//  @13
  pull depth=0			//  @14
  summon class internal.container.array	//  @19
  static invoke ord=0 n_param=0	//  @20
  os drop				//  @29
  os dup				//  @30
  save fld=0			//  @31
  os drop				//  @33
    ; Line 31			//  @34
  ret				//  @34
--
method end

